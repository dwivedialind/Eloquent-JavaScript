1. Array is written a a list of value inside square brackets, separated by commas.
let listOfNumbers = [2,3,4,5,6];
console.log(listOfNumbers[2]);
// -> 4

2. Properties: 
Math.max(); static method returns the largest of the numbers given as input parameters.
Return Value: The largest of the given numbers. Returns NaN if any of the parameters is or is converted into NaN. Returns -Infinity if no parameters
are provided. 
Almost all JavaScript values have properties. The exceptions are null and undefined.

There are two main ways to access properties in JavaScript using dot and with square brackets.
Both value.x and value[x] access a property on value- but not necessarily the same property.

value.x fetches the property of value named "x"
value[x] tries to evaluate the expression x and uses the result, converted to a string, as the property name.

if you know that the property you are interested in is called color, you say value.color. If you want to extract the property named by the value held in the binding i, you say value[i].
Property names are strings. They can be any string, but the dot notation works only with names that look like valid binding names. So if you want to access a property named 2 or John Doe, you must use square brackets: value[2] or value["John Doe"].

3. Properties that contain functions are genrally called methods of the value they belong to.
let doh = "Doh";
console.log(typeof doh.toUpperCase);
// → function
console.log(doh.toUpperCase());
// → DOH

Arrays: The push method adds values to the end of an array, and the pop method does the opposite, removing the last value from it and returning it.

4.Values of type object are arbitrary collection of properties. 
let day1 = {
    squirrel: false,
    events: ["works", "touched tree", "pizza", "running"]
};
property: value

Properties whose names aren't valid binding names or valid numbers have to be quoted.
let descriptors = {
    work: "Went to work",
    "touched tree": "Touched a tree"
};

Reading a property that doesn't exist will give the value undefined.
Assign a value to a property expression with the = operator. Replace the property's value if it already existed or create a new property on the object if it didn't.

example01.js
delete is a unary operator that will remove the named property from the object.
The binary in operator, when applied to a string and an object, tells you whether that object has a property with that name.

To find out what properties an object has, you can use the Object.keys function. Give it an object and it returns an array of strings- the object's property names.
example01.js

Object.assign function that copies all properties from one object into another.
example02.js

Arrays are kind of object specialized for storing sequences of things.

5. Mutability: Values like strings, numbers and Booleans are all immutable.
Diff b/w Assignability vs Immutability
test = "rat" -> test = "cat" //OK
"rat" -> "cat" //NOT OK
Object values can be modified.
With Objects, there is a difference between having two references to the same object and having two different objects that contain the same properties.
example04.js
The object1 and object2 bindings grasp the same object, they have same identity.
Binding can be let(changeable) or constant, but this is separate from the way their values behave.
Const binding to an object can itself not be changed and will continue to point at the same object, the contents of that object might change.
example05.js
Comparing objects with JavaScript's == operator, it compares by identity: produce true only if bot objects are precisely the same value.
Comparing different objects, will return false, even if they have identical properties.
